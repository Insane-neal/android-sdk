apply plugin: 'com.android.library'

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 20
        versionCode 1
        versionName '0.0.1'
    }

    lintOptions {
        abortOnError true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.netflix.rxjava:rxjava-core:0.20.0-RC5'
    compile 'com.netflix.rxjava:rxjava-android:0.20.0-RC5'
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.1'
    compile 'com.squareup.okhttp:okhttp:1.6.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:1.6.0'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile('com.pubnub:pubnub:3.6.3') {
        exclude group: 'org.json'
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equalsIgnoreCase("debug")) {
        return; // Skip debug builds.
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = files(plugins.findPlugin("com.android.library").getBootClasspath())
        classpath = files(variant.javaCompile.classpath.files) + ext.androidJar
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://d.android.com/reference");

        exclude '**/internal/**'
        failOnError false
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

task clearJar(type: Delete) {
    delete 'build/libs/android-sdk-code.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename ('classes.jar', 'android-sdk-code.jar')
}

makeJar.dependsOn(clearJar, build)

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
