buildscript {
    repositories {
        maven { url 'https://repo.eclipse.org/content/repositories/paho-releases' }
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
    }
}
apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionName '1.0.3'
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    maven { url 'https://repo.eclipse.org/content/repositories/paho-releases' }
    mavenCentral()
}

dependencies {
    compile 'io.reactivex:rxandroid:1.1.0'
    provided 'io.relayr:java-sdk:1.1.0'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equalsIgnoreCase("debug")) {
        return;
    }
    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
        classpath = files(variant.javaCompile.classpath.files) + ext.androidJar
        options.memberLevel = JavadocMemberLevel.PUBLIC
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://developer.android.com/reference");
        options.links("http://reactivex.io/RxJava/javadoc/");
        options.links("http://square.github.io/retrofit/javadoc/");

        exclude '**/internal/**'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/*Module*.java'
        exclude '**/Mock*.java'
        exclude '**/RelayrApp.java'
        exclude '**/api/OauthApi*'
        exclude '**/api/SubscriptionApi*'
        exclude '**/activity/*'
        exclude '**/storage/*'
        exclude '**/ble/parser/*'
        exclude '**/ble/BleUtils.java'
        exclude '**/ble/BleSocketClient.java'
        exclude '**/ble/BluetoothGattStatus.java'
        exclude '**/ble/DeviceCompatibilityUtils.java'
        exclude '**/ble/service/error/*'
        exclude '**/ble/service/BluetoothGattReceiver.java'
        exclude '**/ble/service/ShortUUID.java'

        failOnError false
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }
}

task clearJar(type: Delete) {
    delete 'build/libs/android-sdk-code.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', 'android-sdk-code.jar')
}

makeJar.dependsOn(clearJar, build)

if (!android.defaultConfig.versionName.contains("SNAPSHOT")) {
    apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
}
